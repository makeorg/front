{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Test Styled": {
    "scope": "javascript,typescript,flow",
    "prefix": "testStyled",
    "body": [
      "import React from 'react';",
      "import renderer from 'react-test-renderer';",
      "import { ComponentStyle } from './index';",
      "",
      "describe('ComponentStyle', () => {",
      "  it('snapshot by default', () => {",
      "    const component = renderer.create(",
      "      <ComponentStyle />",
      "    ).toJSON();",
      "    expect(component).toMatchSnapshot();",
      "  });",
      "",
      "  // you can also secure important props with toHaveStyleRule",
      "  it('must set color from props', () => {",
      "    const component = renderer.create(",
      "      <ComponentStyle color='red' />",
      "    ).toJSON();",
      "    expect(component).toHaveStyleRule('color', 'red');",
      "   expect(component).toHaveStyleRule('background-color', 'red', {",
      "      modifier: ':active'",
      "    });",
      "  });",
      "});"
    ]
  }
}
