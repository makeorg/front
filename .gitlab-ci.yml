image: makeorg/docker-arch-docker:latest

variables: &global_variables
  IMAGE: "make-front"
  NODE_IMAGE: "node:12.22-alpine"
  YARN_VERSION: "1.22.5"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - ~/.cache
    - node_modules

stages:
  - check
  - e2e
  - build
  - deploy
  - merge
  
lint:
  stage: check
  except: 
    - production
  image: $NODE_IMAGE
  before_script:
    - export YARN_VERSION="$YARN_VERSION"
  script:
    - yarn install --check-files
    - yarn lint

flow-static:
  stage: check
  except: 
    - production
  image: $NODE_IMAGE
  before_script:
    - export YARN_VERSION="$YARN_VERSION"
  script:
    - wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub && \
    - wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.25-r0/glibc-2.25-r0.apk && \
    - apk add glibc-2.25-r0.apk
    - yarn install --check-files
    - yarn flow

test:
  stage: check
  image: $NODE_IMAGE
  before_script:
    - export YARN_VERSION="$YARN_VERSION"
  script:    
    - node -v
    - yarn install --check-files
    - yarn translation
    - yarn documentation
    - yarn accessibility
    - yarn test --coverage
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - coverage

jscpd:
  stage: check
  except: 
    - production
  image: $NODE_IMAGE
  before_script:
    - export YARN_VERSION="$YARN_VERSION"
  script:
    - yarn install --check-files
    - yarn jscpd
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - reports
  
e2e-test:
  variables:
    <<: *global_variables
    CYPRESS_CACHE_FOLDER: '$CI_PROJECT_DIR/cache_cypress'
  stage: e2e
  needs: []
  except: 
    - production
  image: cypress/browsers:node12.18.3-chrome89-ff86
  script:
    - yarn install --check-files
    - yarn build
    - yarn ci cypress:run
  cache: {}
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - cypress/screenshots
      - cypress/videos

lighthouse:
  stage: check
  except: 
    - production
  image: markhobson/node-chrome:latest
  script:
    - npm install -g n
    - n 12.22
    - npm i -g lighthouse@~6.1.0 lighthouse-ci@1.10.0 yarn
    - yarn install --check-files
    - lighthouse --version && lighthouse-ci --version
    - yarn build
    - mkdir -p reports/lighthouse
    - yarn ci lighthouse
  cache: {}    
  artifacts:
    paths:
      - ./reports
    expire_in: 1 week

build:
  stage: build
  tags:
    - docker
  before_script:
    - export IMAGE_VERSION=`git rev-parse --short=10 HEAD`
    - mkdir -p /var/lib/docker
    - mount -t tmpfs -o size=12G tmpfs /var/lib/docker
    - if [ ! -e /var/run/docker.sock ]; then DOCKER_DRIVER=overlay2 dockerd & fi
    - until docker ps; do echo "waiting for docker to be up..."; sleep 0.5; done
    - docker login "https://$NEXUS_URL" --username "$NEXUS_USER" --password "$NEXUS_PASSWORD"
    - echo $(docker pull $NEXUS_URL/$IMAGE:$IMAGE_VERSION)
  script:
    - >
      if [[ -z $(docker images -q $NEXUS_URL/$IMAGE:$IMAGE_VERSION) ]];then
        docker build --rm -t $NEXUS_URL/$IMAGE:$IMAGE_VERSION .
        docker push $NEXUS_URL/$IMAGE:$IMAGE_VERSION
      fi
    - docker tag $NEXUS_URL/$IMAGE:$IMAGE_VERSION $NEXUS_URL/$IMAGE:$CI_COMMIT_REF_NAME-latest
    - docker push $NEXUS_URL/$IMAGE:$CI_COMMIT_REF_NAME-latest

deploy-preproduction:
  stage: deploy
  environment:
    name: preproduction
  only:
    - preproduction
  script:
    - >
      curl -D - -X "POST"
      -H "Accept: application/json"
      -H "Content-Type: application/x-www-form-urlencoded"
      -H "X-Rundeck-Auth-Token: $RUNDECK_PREPROD_TOKEN"
      --data-urlencode "argString=-version $CI_COMMIT_REF_NAME-latest"
      $RUNDECK_PREPROD_URL/api/16/job/$RUNDECK_PREPROD_JOB_ID/run

deploy-production:
  stage: deploy
  environment:
    name: production
  only:
    - production
  script:
    - >
      curl -D - -X "POST"
      -H "Accept: application/json"
      -H "Content-Type: application/x-www-form-urlencoded"
      -H "X-Rundeck-Auth-Token: $RUNDECK_PROD_TOKEN"
      --data-urlencode "argString=-version $CI_COMMIT_REF_NAME-latest"
      $RUNDECK_PROD_URL/api/16/job/$RUNDECK_PROD_JOB_ID/run

merge-to-prod:
  stage: merge
  when: manual
  only:
    - preproduction
  allow_failure: false
  script:
    - mkdir -p ~/.ssh/
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa gitlab.com > ~/.ssh/known_hosts
    - echo "${DEPLOY_PRIVATE_KEY}" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - export CI_PUSH_REPO=`echo $CI_REPOSITORY_URL | perl -pe 's#.*@(.+?(\:\d+)?)/#git@\1:#'`
    - echo "Target repo is ${CI_PUSH_REPO}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git remote set-url origin "${CI_PUSH_REPO}"
    - git checkout production
    - git merge --ff-only origin/preproduction
    - git push origin production:production
